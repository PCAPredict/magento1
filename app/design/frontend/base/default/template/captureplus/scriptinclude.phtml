<?php

    $pcaLicenseKey = Mage::getStoreConfig('captureplus/login/license_key');
    $pcaAccCode = Mage::getStoreConfig('captureplus/login/account_code');

    $pcaCustomCode = Mage::getStoreConfig('captureplus/settings/custom_code');
    $pcaMappings = Mage::getStoreConfig('captureplus/settings/custom_mappings2');

    if($pcaLicenseKey) {
?>

<script type="text/javascript">

    if (!String.prototype.includes) {
        String.prototype.includes = function(search, start) {
            'use strict';
            if (typeof start !== 'number') {
                start = 0;
            }
            
            if (start + search.length > this.length) {
                return false;
            } else {
                return this.indexOf(search, start) !== -1;
            }
        };
    }

    (function (a, c, b, e) {
        a[b] = a[b] || {}; a[b].initial = { accountCode: "<?php echo $pcaAccCode; ?>", host: "<?php echo $pcaAccCode; ?>.pcapredict.com" };
        a[b].on = a[b].on || function () { (a[b].onq = a[b].onq || []).push(arguments) }; var d = c.createElement("script");
        d.async = !0; d.src = e; c = c.getElementsByTagName("script")[0]; c.parentNode.insertBefore(d, c)
    })(window, document, "pca", "//<?php echo $pcaAccCode; ?>.pcapredict.com/js/sensor.js");

    //<![CDATA[

    var shippingAddress =[];
    var billingAddress = [];

    var supressCountry = false;
    var shippingFirstTime = true;
    var billingFirstTime = true;

    var pcaFirstLoad = false;
    var shouldSetByIp = false;

    (function() {
        var magento = pca.magento = pca.magento || {};

        magento.controls = magento.controls || [];
        var capturePlusFields = [];

        document.addEventListener('focus', function(e) {
            var checkoutBillingMappings = [];
            var checkoutShippingMappings = [];
            <?php echo $pcaMappings; ?>

            if (e.target.id.includes('shipping')) 
            {
                var contains = false;

                for (var i = 0; i < checkoutShippingMappings.length; i++) {
                    if (checkoutShippingMappings[i].element === e.target.id) {
                        contains = true;
                        break;
                    }
                }

                if (contains) {
                    if (shippingFirstTime) {
                        supressCountry = false;
                    }
                    shippingFirstTime = false;

                    shippingAddress = checkoutShippingMappings;
                    billingAddress.length = 0;
                    pca.load();
                    supressCountry = true;
                } 
            }
            else if (e.target.id.includes('billing')) 
            {
                var contains = false;

                for (var i = 0; i < checkoutBillingMappings.length; i++) {
                    if (checkoutBillingMappings[i].element === e.target.id) {
                        contains = true;
                        break;
                    }
                }

                if (contains) {
                    if (billingFirstTime) {
                        supressCountry = false;
                    }
                    billingFirstTime = false;

                    billingAddress = checkoutBillingMappings;
                    shippingAddress.length = 0;
                    pca.load();
                    supressCountry = true;
                }
            }
        }, true);
      
        pca.on('data', function(source, key, address, variations) {
            var provNameElId = [];
            for (var i = 0; i < capturePlusFields.length; i++) {
                var firePca = true;               
                var el = document.getElementById(capturePlusFields[i].element);
                if (el) {
                    if (capturePlusFields[i].field === "{ProvinceName}") {
                        provNameElId.push(el.id);
                    }
                    if (firePca) {
                        pca.fire(el, 'change');
                        firePca = false;
                    }
                }
            }
            if (provNameElId.length > 0) {
                for (var i = 0; i < provNameElId.length; i++) {
                    var firePca = true;
                    var el = document.getElementById(provNameElId[i]);
                    if (el) {
                        for (var j = 0; j < el.options.length; j++) {
                            if (el.options[j].text === address.ProvinceName) {
                                el.selectedIndex = j;
                                break;
                            }
                        }
                        if (firePca) {
                            pca.fire(el, 'change');
                            firePca = false;
                        }
                    }
                }
            }
        });
        
        magento.canLoad = function() {
            // check to see if we have the form fields                    
            if (pca
                && pca.platform
                && typeof pca.platform.elementExists === 'function' 
                && (pca.platform.elementExists("billing:street1"))) {
                    
                //load pca
                pca.load();
            }
            else {
                // re-set the timout
                window.setTimeout(magento.canLoad, 500);
            }
        }
        
        magento.onload = function(func) {
            // assign any pre-defined functions on 'window.onload' to a variable
            var oldOnLoad = window.onload;
            // if there is not any function hooked to it
            if (typeof window.onload !== 'function') {
                // you can hook your function with it
                window.onload = func
            } else { // someone already hooked a function
                window.onload = function () {
                    // call the function hooked already
                    oldOnLoad();
                    // call your awesome function
                    func();
                }
            }
        }

        //wait for the page to be ready
        magento.onload(function() {
            window.setTimeout(magento.canLoad, 500);
        });

        pca.on('ready', function ()
        {
            pca.sourceString = 'MagentoExtension-v3.1.0.4';
        });

        pca.on('restrictions', function (service, key, restrictions) {
            switch (service) {
                case 'capture+': 

                    var newRestrictions = [];

                    for (var i = 0; i < restrictions.length; i++) {
                        if (!restrictions[i].Key.startsWith('fieldPresent')) {
                            newRestrictions.push(restrictions[i]);
                        }
                    }
                    restrictions.length = 0;
                    restrictions = newRestrictions;

                    break;
                default: 
                    break;
            }
            
        });

        pca.on("options", function(service, id, options) {

            // If the default country in magento is not set then let the tag perform as normal, so ip location bias will be on if set on the key.
            // If the location bias is not set on the key then the default country should be used form the key instead (CHECK THIS!)
            // If the default country in magento is set then ignore ip location bias and the country origin in the sensor will use the default country in magento.
            var iso2CountryCode = <?php echo '"'.Mage::getStoreConfig('general/country/default').'";' ?>

            if (iso2CountryCode != ""){
                options.setCountryByIP = false;
                options.CapturePlusDefaultCountry = iso2CountryCode; // The CapturePlusDefaultCountry is a iso3 code but it seems to work taking an iso2 code as well.
            }
        });

        pca.on("fields", function(service, id, fields) {       
            
            var capturePlusMappings = [];

            if (shippingAddress.length > 0) {
                capturePlusMappings = shippingAddress;
            } else if (billingAddress.length > 0) {
                capturePlusMappings = billingAddress;
            }

            switch (service) {
                case 'capture+':

                var newCPMappings = [];
                
                if (capturePlusMappings.length > 0) {
                    for (var i = 0; i < capturePlusMappings.length; i++) {
                        newCPMappings.push(capturePlusMappings[i]);
                    }
                }
                fields.length = 0;
                for (var i = 0; i < newCPMappings.length; i++) {
                    fields.push(newCPMappings[i]);
                    var fieldAlreadyFound = false;
                    for (var ii = 0; ii < capturePlusFields.length; ii++) {
                        if (capturePlusFields[ii].element === newCPMappings[i].element) {
                            fieldAlreadyFound = true;
                            break;
                        }
                    }
                    if (fieldAlreadyFound != true) 
                        capturePlusFields.push(newCPMappings[i]);
                } 
                break;

                default: 
                    break;
            }
        });

        var registerButton = document.getElementById("onepage-guest-register-button");
        if (registerButton) {
            registerButton.addEventListener("click", function() {
                pca.load();
            });
        }
        
    <?php
        if($pcaCustomCode) {
            echo $pcaCustomCode;
        }
    ?>

    })();
//]]>
</script>
<?php } ?>