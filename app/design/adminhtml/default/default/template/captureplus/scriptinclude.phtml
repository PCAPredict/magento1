<?php

    $pcaLicenseKey = Mage::getStoreConfig('captureplus/login/license_key');
    $pcaAccCode = Mage::getStoreConfig('captureplus/login/account_code');

    $pcaCustomCode = Mage::getStoreConfig('captureplus/settings/custom_code');
    $pcaMappings = Mage::getStoreConfig('captureplus/settings/custom_mappings2');

    if($pcaLicenseKey) {
?>

<script type="text/javascript">

    if (!String.prototype.includes) {
        String.prototype.includes = function(search, start) {
            'use strict';
            if (typeof start !== 'number') {
                start = 0;
            }
            
            if (start + search.length > this.length) {
                return false;
            } else {
                return this.indexOf(search, start) !== -1;
            }
        };
    }

    if (!Array.prototype.find) {
        Object.defineProperty(Array.prototype, 'find', {
            value: function(predicate) {
            'use strict';
            if (this == null) {
            throw new TypeError('Array.prototype.find called on null or undefined');
            }
            if (typeof predicate !== 'function') {
            throw new TypeError('predicate must be a function');
            }
            var list = Object(this);
            var length = list.length >>> 0;
            var thisArg = arguments[1];
            var value;

            for (var i = 0; i < length; i++) {
            value = list[i];
            if (predicate.call(thisArg, value, i, list)) {
                return value;
            }
            }
            return undefined;
            }
        });
    }

    // Production steps of ECMA-262, Edition 5, 15.4.4.18
    // Reference: http://es5.github.io/#x15.4.4.18
    if (!Array.prototype.forEach) {

        Array.prototype.forEach = function(callback, thisArg) {

            var T, k;

            if (this === null) {
            throw new TypeError(' this is null or not defined');
            }

            // 1. Let O be the result of calling toObject() passing the
            // |this| value as the argument.
            var O = Object(this);

            // 2. Let lenValue be the result of calling the Get() internal
            // method of O with the argument "length".
            // 3. Let len be toUint32(lenValue).
            var len = O.length >>> 0;

            // 4. If isCallable(callback) is false, throw a TypeError exception. 
            // See: http://es5.github.com/#x9.11
            if (typeof callback !== "function") {
            throw new TypeError(callback + ' is not a function');
            }

            // 5. If thisArg was supplied, let T be thisArg; else let
            // T be undefined.
            if (arguments.length > 1) {
            T = thisArg;
            }

            // 6. Let k be 0
            k = 0;

            // 7. Repeat, while k < len
            while (k < len) {

            var kValue;

            // a. Let Pk be ToString(k).
            //    This is implicit for LHS operands of the in operator
            // b. Let kPresent be the result of calling the HasProperty
            //    internal method of O with argument Pk.
            //    This step can be combined with c
            // c. If kPresent is true, then
            if (k in O) {

                // i. Let kValue be the result of calling the Get internal
                // method of O with argument Pk.
                kValue = O[k];

                // ii. Call the Call internal method of callback with T as
                // the this value and argument list containing kValue, k, and O.
                callback.call(T, kValue, k, O);
            }
            // d. Increase k by 1.
            k++;
            }
            // 8. return undefined
        };
    }

    // Production steps of ECMA-262, Edition 5, 15.4.4.14
    // Reference: http://es5.github.io/#x15.4.4.14
    if (!Array.prototype.indexOf) {
        Array.prototype.indexOf = function(searchElement, fromIndex) {

            var k;

            // 1. Let o be the result of calling ToObject passing
            //    the this value as the argument.
            if (this == null) {
            throw new TypeError('"this" is null or not defined');
            }

            var o = Object(this);

            // 2. Let lenValue be the result of calling the Get
            //    internal method of o with the argument "length".
            // 3. Let len be ToUint32(lenValue).
            var len = o.length >>> 0;

            // 4. If len is 0, return -1.
            if (len === 0) {
            return -1;
            }

            // 5. If argument fromIndex was passed let n be
            //    ToInteger(fromIndex); else let n be 0.
            var n = fromIndex | 0;

            // 6. If n >= len, return -1.
            if (n >= len) {
            return -1;
            }

            // 7. If n >= 0, then Let k be n.
            // 8. Else, n<0, Let k be len - abs(n).
            //    If k is less than 0, then let k be 0.
            k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

            // 9. Repeat, while k < len
            while (k < len) {
            // a. Let Pk be ToString(k).
            //   This is implicit for LHS operands of the in operator
            // b. Let kPresent be the result of calling the
            //    HasProperty internal method of o with argument Pk.
            //   This step can be combined with c
            // c. If kPresent is true, then
            //    i.  Let elementK be the result of calling the Get
            //        internal method of o with the argument ToString(k).
            //   ii.  Let same be the result of applying the
            //        Strict Equality Comparison Algorithm to
            //        searchElement and elementK.
            //  iii.  If same is true, return k.
            if (k in o && o[k] === searchElement) {
                return k;
            }
            k++;
            }
            return -1;
        };
    }

    (function (a, c, b, e) {
        a[b] = a[b] || {}; a[b].initial = { accountCode: "<?php echo $pcaAccCode; ?>", host: "<?php echo $pcaAccCode; ?>.pcapredict.com" };
        a[b].on = a[b].on || function () { (a[b].onq = a[b].onq || []).push(arguments) }; var d = c.createElement("script");
        d.async = !0; d.src = e; c = c.getElementsByTagName("script")[0]; c.parentNode.insertBefore(d, c)
    })(window, document, "pca", "//<?php echo $pcaAccCode; ?>.pcapredict.com/js/sensor.js");

    //<![CDATA[

    var shippingAddress = [];
    var billingAddress = [];
    var custInfoAddress = [];
    var editOrderAddress = [];

    var countryBlockLookup = false;

    (function() {
        var magento = pca.magento = pca.magento || {};
     
        magento.controls = magento.controls || [];
        var capturePlusFields = [];

        document.addEventListener('focus', function(e) {

            var backendShippingAddress = [];
            var backendBillingAddress = [];
            var backendCustomerInfoPartial = [];
            var backendEditOrderAddress = [];
            <?php echo $pcaMappings; ?>

            if (e.target.id.includes('shipping')) 
            {
                var contains = false;

                for (var i = 0; i < backendShippingAddress.length; i++) {
                    if (backendShippingAddress[i].element === e.target.id) {
                        contains = true;
                        break;
                    }
                }

                if(contains) {
                    shippingAddress = backendShippingAddress;
                    billingAddress.length = 0;
                    custInfoAddress.length = 0;
                    editOrderAddress.length = 0;
                    pca.load();
                }
            }
            else if (e.target.id.includes('billing')) 
            {
                var contains = false;

                for (var i = 0; i < backendBillingAddress.length; i++) {
                    if (backendBillingAddress[i].element === e.target.id) {
                        contains = true;
                        break;
                    }
                }

                if(contains) {
                    billingAddress = backendBillingAddress;
                    shippingAddress.length = 0;
                    custInfoAddress.length = 0;
                    editOrderAddress.length = 0;
                    pca.load();
                }
            }
            else if (e.target.id.includes('_item')) 
            {
                var contains = false;

                for (var i = 0; i < backendCustomerInfoPartial.length; i++) {
                    if (e.target.id.includes(backendCustomerInfoPartial[i].element)) {
                        contains = true;
                        break;
                    }
                }

                if (contains) {

                    var n = e.target.id[5];

                    for (var i = 0; i < backendCustomerInfoPartial.length; i++) {
                        var tempField = backendCustomerInfoPartial[i].element;
                        backendCustomerInfoPartial[i].element = "_item" + n + tempField;
                    }

                    custInfoAddress = backendCustomerInfoPartial;
                    billingAddress.length = 0;
                    shippingAddress.length = 0;
                    editOrderAddress.length = 0;
                    pca.load();
                }
            }
            else 
            {
                var contains = false;

                for (var i = 0; i < backendEditOrderAddress.length; i++) {
                    if (backendEditOrderAddress[i].element === e.target.id) {
                        contains = true;
                        break;
                    }
                }

                if (contains) {
                    editOrderAddress = backendEditOrderAddress;
                    billingAddress.length = 0;
                    shippingAddress.length = 0;
                    custInfoAddress.length = 0;
                    pca.load();
                }
            }
        }, true);

      pca.on('data', function(source, key, address, variations) {
            var provNameElId = [];
            for (var i = 0; i < capturePlusFields.length; i++) {
                var firePca = true;               
                var el = document.getElementById(capturePlusFields[i].element);
                if (el) {
                    if (capturePlusFields[i].field === "{ProvinceName}") {
                        provNameElId.push(el.id);
                    }
                    if (firePca) {
                        pca.fire(el, 'change');
                        firePca = false;
                    }
                }
            }
            if (provNameElId.length > 0) {
                for (var i = 0; i < provNameElId.length; i++) {
                    var firePca = true;
                    var el = document.getElementById(provNameElId[i]);
                    if (el) {
                        for (var j = 0; j < el.options.length; j++) {
                            if (el.options[j].text === address.ProvinceName) {
                                el.selectedIndex = j;
                                break;
                            }
                        }
                        if (firePca) {
                            pca.fire(el, 'change');
                            firePca = false;
                        }
                    }
                }
            }
        });

        magento.canLoad = function() {
            // check to see if we have the form fields                    
            if (pca
                && pca.platform
                && typeof pca.platform.elementExists === 'function' 
                && (pca.platform.elementExists("order-billing_address_street0")
                || pca.platform.elementExists("_item1street0"))) {
                    
                //load pca
                pca.load();
            }
            else {
                // re-set the timout
                window.setTimeout(magento.canLoad, 500);
            }
        }
        
        magento.onload = function(func) {
            // assign any pre-defined functions on 'window.onload' to a variable
            var oldOnLoad = window.onload;
            // if there is not any function hooked to it
            if (typeof window.onload !== 'function') {
                // you can hook your function with it
                window.onload = func
            } else { // someone already hooked a function
                window.onload = function () {
                    // call the function hooked already
                    oldOnLoad();
                    // call your awesome function
                    func();
                }
            }
        }

        //wait for the page to be ready
        magento.onload(function() {
            window.setTimeout(magento.canLoad, 500);
        });

        pca.on('ready', function ()
        {
            pca.sourceString = 'MagentoExtension-v3.1.0.5';
        });

         pca.on('restrictions', function (service, key, restrictions) {
            switch (service) {
                case 'capture+': 

                    var newRestrictions = [];

                    for (var i = 0; i < restrictions.length; i++) {
                        if (!restrictions[i].Key.startsWith('fieldPresent')) {
                            newRestrictions.push(restrictions[i]);
                        }
                    }
                    restrictions.length = 0;
                    restrictions = newRestrictions;

                    break;
                default: 
                    break;
            }
            
        });

        pca.on("options", function(service, id, options) {

            //var magentoDefaultCountryIso2 = <?php echo '"'.Mage::getStoreConfig('general/country/default').'";' ?>
            //var pcaDefaultCountryIso3 = options.CapturePlusDefaultCountry;

            var magentoCountriesAllowedListIso2Str = <?php echo '"'.Mage::getStoreConfig('general/country/allow').'";' ?>
            
            var magentoCountriesAllowedListIso2 = [];

            if (magentoCountriesAllowedListIso2Str != null && magentoCountriesAllowedListIso2Str != "undefined" && magentoCountriesAllowedListIso2Str != "")
            {
                magentoCountriesAllowedListIso2 = magentoCountriesAllowedListIso2Str.split(",");
            }

            var pcaCountriesAllowedListIso3Str = null;

            if (options.CapturePlusCountryList != "undefined") { // This property might not be initialised all the time, this is just to say we are forcing it here to represent an empty string so logic can resume as normal.
                pcaCountriesAllowedListIso3Str = "";
            }

            // If a list of countries to allow is present in pca, then logic on this.
            if (pcaCountriesAllowedListIso3Str != null && pcaCountriesAllowedListIso3Str != "") {

                var pcaCountriesAllowedListIso3 = pcaCountriesAllowedListIso3Str.split(",");

                // For each pca country in the allowed list, check if it is in magento and if not then remove it.
                pcaCountriesAllowedListIso3.forEach(function(countryCode) {  // foreach polyfill for < IE 9

                    // grab the iso2 to check in magento codes
                    var countryCodeIso2 = pca.countries.find(function (element) { // .find() Polyfill included for IE
                        return element.iso3.toUpperCase() == countryCode.toUpperCase();
                    });
                    
                    // magento does not have the country in it's list.
                    if (magentoCountriesAllowedListIso2.indexOf(countryCodeIso2.iso2) == -1) { //.indexOf() polyfill included for < IE9
                        pcaCountriesAllowedListIso3.splice(pcaCountriesAllowedListIso3.indexOf(countryCode), 1);
                    }

                }, this);

                options.CapturePlusCountryList = pcaCountriesAllowedListIso3.toString();

                // If we have now removed all the countries from the list then this means the pca sensor should not return results. 
                // This is because the magento shop has not setup the countries that the pca settings allow. 
                if (pcaCountriesAllowedListIso3.length == 0){

                    // Alternative to commented out above.
                    countryBlockLookup = true;
                    pca.load();
                }
            } else {

                var iso2ConvertedIso3 = [];
                
                magentoCountriesAllowedListIso2.forEach(function(iso2Code) { // foreach polyfill for < IE 9
                
                    // .find() Polyfill is top of javascript.
                    var found = pca.countries.find(function (element) { // .find() Polyfill included for IE
                        return element.iso2.toUpperCase() == iso2Code.toUpperCase();
                    });

                    iso2ConvertedIso3.push(found.iso3);
                });

                // No countries in pca so this is saying allow all, then we restrict on what magento wants to restrict on instead.
                options.CapturePlusCountryList = iso2ConvertedIso3.toString();
            }
        });

        pca.on("fields", function(service, id, fields) {  

            if (!countryBlockLookup){     
            
                var mappings = [];

                if (shippingAddress.length > 0) {
                    mappings = shippingAddress;
                } else if (billingAddress.length > 0) {
                    mappings = billingAddress;
                } else if (custInfoAddress.length > 0) {
                    mappings = custInfoAddress;
                } else if (editOrderAddress.length > 0) {
                    mappings = editOrderAddress;
                }

                switch (service) {
                    case 'capture+':

                    var newCPMappings = [];

                    if (mappings.length > 0) {
                        for (var i = 0; i < mappings.length; i++) {
                            newCPMappings.push(mappings[i]);
                        }
                    }
                    fields.length = 0;
                    for (var i = 0; i < newCPMappings.length; i++) {
                        fields.push(newCPMappings[i]);
                        var fieldAlreadyFound = false;
                        for (var ii = 0; ii < capturePlusFields.length; ii++) {
                            if (capturePlusFields[ii].element === newCPMappings[i].element) {
                                fieldAlreadyFound = true;
                                break;
                            }
                        }
                        if (fieldAlreadyFound != true) 
                            capturePlusFields.push(newCPMappings[i]);
                    } 
                    break;

                    default: 
                        break;
                }
            }
        });

        <?php
            if($pcaCustomCode) {
                echo $pcaCustomCode;
            }
        ?> 
    })();
//]]>
</script>

<?php } ?>